#!/usr/bin/perl
use strict;
use warnings;

use UI::Dialog;
use Term::ReadKey;
use Term::ANSIScreen qw(cls);
use Proc::ProcessTable;
use POSIX qw(strftime);
use Number::Bytes::Human qw(format_bytes parse_bytes);

my $FileEditor = "/bin/nano";
my $InitDName = "/etc/init.d/synchronetbbs";
my $SBBSDIR = "/sbbs";
my $BBS_OWNER = "bbsowner:bbsowner";
my $FILEID = "$SBBSDIR/FILEID.txt";
my $BBSIDS = "$SBBSDIR/BBSIDS.txt";
my $BackupCommand = "/root/SyncBackup/syncbackup.pl";
my $PagerCommand = "/usr/bin/less";
my $BACKUP_DIR = "/root/backups";
my $ScreenLog = "/sbbs/SBBSScreen.log";
my $ErrorLog = "/sbbs/data/error.log";
my $GuruLog = "/sbbs/data/guru.log";
my $HackLog = "/sbbs/data/hack.log";
my $SbbsechoLog = "/sbbs/data/sbbsecho.log";
my $SpamLog = "/sbbs/data/spam.log";
my $TelnetCmd = "/usr/bin/telnet";
my $DoorLog = "/opt/doorparty-connector/nohup.out";
my $UpdateCommand = "/usr/bin/git pull";
my $SMCDir = "/root/SynchronetManagementConsole";
my $BackupToolDir = "/root/SyncBackup";	# ZZZ
my $StartupDir = "/root/SynchronetStartup";
my $BinDir = "/root/bin";
my $BBSUtils = "/root/bbs_utils";

###################################################
# No changes below here
###################################################

my $MySettings = "$ENV{'HOME'}/.smcrc";

my $SMC_ver = "1.12.0";
my $Record = "false";	# Are results saved?
my $TempDir = "/tmp";
my $RobotName = "";
my $BotVersion = "";
my $UserName = "";
my $ServerStatus = "foo";
my $SCFG = "$SBBSDIR/exec/scfg";
my $DEBUG_MODE = "off";

my $CONF_FROM = "";
my $CONF_SUBJECT = "";
my $CONF_GROUPS = "";
my $CONF_FILE = "";

my $RESTORE_COMMAND = "tar xvzf";

if ($ENV{'EDITOR'})
{
        $FileEditor = $ENV{'EDITOR'};
}

my $d = new UI::Dialog ( backtitle => "Synchronet BBS Management Console v$SMC_ver", height => 20, width => 65, listheight => 5,
	order => [ 'ascii', 'cdialog', 'xdialog' ]);

my $windowtitle = "Welcome to the Synchronet BBS Management Console!";
my $enjoyedtitle = "We hope you enjoyed SMC!";
my $introtext =
"This is the Synchronet BBS Management Console, a utility for
Synchronet operators to manage their servers from a text GUI
rather than the command line.";

$d->msgbox( title => $windowtitle, text => $introtext );

if (($d->state() eq "ESC") || ($d->state() eq "CANCEL"))
{
	exit 0;
}

sub ReadConfigFile
{
	# Check for config file
	if (-f $MySettings)
	{
		# Read in settings
		open (my $FH, "<", $MySettings) or die "Could not read default file '$MySettings' $!";
		while (<$FH>)
		{
			chop();
			my ($Command, $Setting) = split(/=/, $_);
			if ($Command eq "fileeditor")
			{
				$FileEditor = $Setting;
			}
			if ($Command eq "initdname")
			{
				$InitDName = $Setting;
			}
			if ($Command eq "sbbsdir")
			{
				$SBBSDIR = $Setting;
			}
			if ($Command eq "backupcommand")
			{
				$BackupCommand = $Setting;
			}
			if ($Command eq "pagercommand")
			{
				$PagerCommand = $Setting;
			}
			if ($Command eq "bbsowner")
			{
				$BBS_OWNER = $Setting;
			}
			if ($Command eq "fileid")
			{
				$FILEID = $Setting;
			}
			if ($Command eq "bbsids")
			{
				$BBSIDS = $Setting;
			}
			if ($Command eq "debugmode")
			{
				$DEBUG_MODE = $Setting;
			}
			if ($Command eq "backupdir")
			{
				$BACKUP_DIR = $Setting;
			}
			if ($Command eq "screenlog")
			{
				$ScreenLog = $Setting;
			}
			if ($Command eq "errorlog")
			{
				$ErrorLog = $Setting;
			}
			if ($Command eq "gurulog")
			{
				$GuruLog = $Setting;
			}
			if ($Command eq "hacklog")
			{
				$HackLog = $Setting;
			}
			if ($Command eq "sbbsecholog")
			{
				$SbbsechoLog = $Setting;
			}
			if ($Command eq "spamlog")
			{
				$SpamLog = $Setting;
			}
			if ($Command eq "telnetcmd")
			{
				$TelnetCmd = $Setting;
			}
			if ($Command eq "updatecommand")
			{
				$UpdateCommand = $Setting;
			}

		}
		close($FH);
	}
	else
	{
		# Store defaults
		open (my $FH, ">", $MySettings) or die "Could not create default file '$MySettings' $!";
		print $FH "sbbsdir=$SBBSDIR\n";
		print $FH "fileeditor=$FileEditor\n";
		print $FH "backupcommand=$BackupCommand\n";
		print $FH "pagercommand=$PagerCommand\n";
		print $FH "bbsowner=$BBS_OWNER\n";
		print $FH "fileid=$FILEID\n";
		print $FH "bbsid=$BBSIDS\n";
		print $FH "backupdir=$BACKUP_DIR\n";
		print $FH "debugmode=$DEBUG_MODE\n";
		print $FH "screenlog=$ScreenLog\n";
		print $FH "errorlog=$ErrorLog\n";
		print $FH "gurulog=$GuruLog\n";
		print $FH "hacklog=$HackLog\n";
		print $FH "sbbsecholog=$SbbsechoLog\n";
		print $FH "spamlog=$SpamLog\n";
		print $FH "telnetcmd=$TelnetCmd\n";
		print $FH "doorlog=$DoorLog\n";
		print $FH "updatecommand=$UpdateCommand\n";
		close($FH);
	}
}

my $menuselection = "";

sub PrintDebugCommand
{
	if ($DEBUG_MODE eq "off")
	{
		return;
	}
	my $PassedString = shift;
	print "About to run:\n$PassedString\n";
	print "Press Enter To Run This:";
	my $entered = <STDIN>;
}

sub CheckServerStatus
{
	$ServerStatus = "Stopped";

        # This checks for the BBS process
        my $t = Proc::ProcessTable->new;
        foreach my $p ( @{$t->table} )
        {
                #printf($FORMAT, 
                #       $p->pid, 
                #       $p->ttydev, 
                #       $p->state, 
                #       scalar(localtime($p->start)), 
                #       $p->cmndline);
                if ($p->cmndline eq "sbbs")
                {
                        # Saw a bare sbbs entry
			$ServerStatus = "Running";
                }
        }
}

sub ReadConfig
{
	my $Keyword;
	my $Keyvalue;

	$CONF_FROM = "";
	$CONF_SUBJECT = "";
	$CONF_GROUPS = "";

	open(my $fh, '<', $CONF_FILE) or die "Could not open file '$CONF_FILE' $!";
	while (my $row = <$fh>)
	{
		chomp $row;
		($Keyword, $Keyvalue) = split(':', $row);
		if ($Keyword eq "FROM")
		{
			$CONF_FROM = $Keyvalue;
		}
		elsif ($Keyword eq "SUBJECT")
		{
			$CONF_SUBJECT = $Keyvalue;
		}
		elsif ($Keyword eq "GROUPS")
		{
			$CONF_GROUPS = $Keyvalue;
		}
	}
	close($fh);
	if ($CONF_FROM eq "")
	{
		die ("FROM not set in config file");
	}
	if ($CONF_SUBJECT eq "")
	{
		die ("SUBJECT not set in config file");
	}
	if ($CONF_GROUPS eq "")
	{
		die ("GROUPS not set in config file");
	}
}

sub KillBBS
{
	# This kills just the BBS process, so it can be restarted
	# via the startup script
	my $FORMAT = "%-6s %-10s %-8s %-24s %s\n";
	my $t = Proc::ProcessTable->new;
	#printf($FORMAT, "PID", "TTY", "STAT", "START", "COMMAND"); 
	foreach my $p ( @{$t->table} )
	{
		#printf($FORMAT, 
		#	$p->pid, 
		#	$p->ttydev, 
		#	$p->state, 
		#	scalar(localtime($p->start)), 
		#	$p->cmndline);
		if ($p->cmndline eq "sbbs")
		{
			# Saw a bare sbbs entry
			my $pid = $p->pid;
			#print "**** saw it $pid\n";
			PrintDebugCommand("kill $pid");
			system("kill $pid");
		}
	}
}

sub MainMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Main Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Start Server',
                                      '2', 'Stop Server',
                                      '3', 'Server Console',
                                      '4', 'Turn Off Respawn',
                                      '5', 'Turn On Respawn',
                                      '6', 'Edit sbbs.ini',
                                      '7', 'Run scfg',
                                      '8', 'Backup / Restore',
                                      '9', 'Set File Owners',
                                      '10', 'Call DOVENET',
                                      '11', 'Edit Settings',
                                      '12', 'Call Newslink',
                                      '13', 'Reset BBS Proc.',
                                      '14', 'Posting Tools',
                                      '15', 'Log Files',
                                      '16', 'Telnet to BBS',
                                      '17', 'Update Tools',
                                      'q', 'Quit SMC' ] );
}

sub PostingToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Posting Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Edit Announce.txt',
                                      '2', 'Edit FilePost.txt',
                                      '3', 'Edit FilePostBottom.txt',
                                      '4', 'Run BBS Announce',
                                      '5', 'Run FileAnnounce',
                                      '6', 'Edit BBS IDs',
                                      '7', 'Edit File IDs',
                                      'q', 'Main Menu' ] );
}

sub PostingTools
{
	while (-1)
	{
		PostingToolsMenu();
		if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
		{
			return;
		}
		elsif ($menuselection eq "1")
		{
			# Edit Announce.txt file
			PrintDebugCommand("$FileEditor $SBBSDIR/exec/Announce.txt");
			system("$FileEditor $SBBSDIR/exec/Announce.txt");
		}
		elsif ($menuselection eq "2")
		{
			# Edit FilePost.txt file
			PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePost.txt");
			system("$FileEditor $SBBSDIR/exec/FilePost.txt");
		}
		elsif ($menuselection eq "3")
		{
			# Edit FilePostBottom.txt file
			PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
			system("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
		}
		elsif ($menuselection eq "4")
		{
			# Read in config
			$CONF_FILE = $BBSIDS;
			ReadConfig();
	
			# Run BBS Announce
			PrintDebugCommand("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
			system("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
		}
		elsif ($menuselection eq "5")
		{
			# Read in config
			$CONF_FILE = $FILEID;
			ReadConfig();

			# Run File Announce
			PrintDebugCommand("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
			system("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
		}
		elsif ($menuselection eq "6")
		{
			# Edit BBSIDS.txt file
			if (! -f $BBSIDS)
			{
				PrintDebugCommand("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
				system("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
			}
			PrintDebugCommand("$FileEditor $BBSIDS");
			system("$FileEditor $BBSIDS");
		}
		elsif ($menuselection eq "7")
		{
			# Edit FILEID.txt file
			if (! -f $FILEID)
			{
				PrintDebugCommand("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
				system("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
			}
			PrintDebugCommand("$FileEditor $FILEID");
			system("$FileEditor $FILEID");
		}
	}
}

sub LogFilesMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Log File Viewer Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Screen Log File',
                                      '2', 'Error Log File',
                                      '3', 'Guru Log File',
                                      '4', 'Hack Log File',
                                      '5', 'Sbbsecho Log File',
                                      '6', 'Spam Log File',
                                      '7', 'Clear Screen',
                                      '8', 'Clear Error',
                                      '9', 'Clear Guru',
                                      '10', 'Clear Hack',
                                      '11', 'Clear SBBS Echo',
                                      '12', 'Clear Spam',
                                      '13', 'DoorParty Log',
                                      'q', 'Main Menu' ] );
}

sub BackupToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Backup Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Run Backup',
                                      '2', 'Restore Backup',
                                      'q', 'Main Menu' ] );
}

sub UpdateToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}
	$menuselection = $d->menu( title => "Update Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Update SMC',
                                      '2', 'Update Backup',
                                      '3', 'Update Startup',
                                      '4', 'Update bbs_utils',
                                      'q', 'Main Menu' ] );
}

sub DoUpdate
{
	my $DesiredDir = $_[0];

	# Update desired utility
	chdir ($DesiredDir);
	PrintDebugCommand("Running $UpdateCommand in $DesiredDir\n");
	system("$UpdateCommand");
	print "Press Enter To Continue";
	my $entered = <STDIN>;
}

sub UpdateTools
{
	while (-1)
	{
		UpdateToolsMenu();
		if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
		{
			return;
		}
		elsif ($menuselection eq "1")
		{
			# Update SMC
			DoUpdate($SMCDir);
		}
		elsif ($menuselection eq "2")
		{
			# Update BackupToolDir
			DoUpdate($BackupToolDir);
		}
		elsif ($menuselection eq "3")
		{
			# Update Startup
			DoUpdate($StartupDir);
		}
		elsif ($menuselection eq "4")
		{
			# Update bbs_utils
			DoUpdate($BBSUtils);
		}
	}
}

sub GetWhichBackup
{
	my $UsedFile = 0;
	opendir(DIR, $BACKUP_DIR) or die $!;
	my @file_list;
	while ( my $file = readdir(DIR))
	{
		# We only want files
		next unless (-f "$BACKUP_DIR/$file");

		# Use a regular expression to find files ending in .tgz
		next unless ($file =~ m/\.tgz$/);
		push @file_list, "$BACKUP_DIR/$file";
	}
	closedir(DIR);

	#print scalar @file_list;
	system("clear");
	print "Backup\tBackup Date\t\tSize\n";
	for my $file (sort
		{
			my @a_stat = stat($a);
			my @b_stat = stat($b);
			$b_stat[8] <=> $a_stat[8];
		} @file_list ) {
			$UsedFile++;
			my @stat = stat ("$file");
			my $size = format_bytes($stat[7], bs => 1000);
			print "$UsedFile\t" . strftime("%m/%d/%Y %H:%M:%S", localtime($stat[8])) . "\t$size ($file)\n";
		};

	#Ask user which one
	while(-1)
	{
		print "Restore which backup? (1-5): ";
		my $Chosen = <STDIN>;
		chop ($Chosen);
		if ((lc($Chosen) eq "q") || (lc($Chosen) eq "quit") || ($Chosen eq ""))
		{
			return "";
		}
		my $IntChosen = int($Chosen);
		if (($IntChosen >= 1) && ($IntChosen <= 5))
		{
			return $Chosen;
		}
	}
}

sub DoRestore
{
	my $WhichBackup = "";

	# Get which backup they want
	$WhichBackup = GetWhichBackup();
	if ($WhichBackup eq "")
	{
		print "No backup selected\n";
		return;
	}
	print "Using backup $WhichBackup...\n";

	# Turn off respawn
	PrintDebugCommand("touch $SBBSDIR/nostart");
	system("touch $SBBSDIR/nostart");
	# Kill the server process
	print "Killing SBBS process, please wait...";
	KillBBS();
	sleep(10);
	# Create new folder
	print "Creating new folder, please wait...";
	PrintDebugCommand("mkdir $SBBSDIR-new");
	system("mkdir $SBBSDIR-new");
	PrintDebugCommand("touch $SBBSDIR-new/nostart");
	system("touch $SBBSDIR-new/nostart");
	# Swap folders
	print "Swapping folders, please wait...";
	PrintDebugCommand("mv $SBBSDIR $SBBSDIR-keep");
	system("mv $SBBSDIR $SBBSDIR-keep");
	PrintDebugCommand("mv $SBBSDIR-new $SBBSDIR");
	system("mv $SBBSDIR-new $SBBSDIR");
	PrintDebugCommand("rm -r $SBBSDIR-keep");
	system("rm -r $SBBSDIR-keep");

	# Do the restore
	chdir ("/");
	PrintDebugCommand("$RESTORE_COMMAND $BACKUP_DIR/syncbackup-$WhichBackup.tgz");
	system("$RESTORE_COMMAND $BACKUP_DIR/syncbackup-$WhichBackup.tgz");
	# Change owners
	PrintDebugCommand("chown -R $BBS_OWNER /sbbs");
	system("chown -R $BBS_OWNER /sbbs");
	unlink("$SBBSDIR/nostart");
}

sub LogFiles
{
	while (-1)
	{
		LogFilesMenu();
		if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
		{
			return;
		}
		elsif ($menuselection eq "1")
		{
			# Screen log file
			PrintDebugCommand("Displaying Screen log file");
			system("$PagerCommand $ScreenLog");
		}
		elsif ($menuselection eq "2")
		{
			# Error Log File
			PrintDebugCommand("Displaying Error log file");
			system("$PagerCommand $ErrorLog");
		}
		elsif ($menuselection eq "3")
		{
			# Guru Log File
			PrintDebugCommand("Displaying Guru log file");
			system("$PagerCommand $GuruLog");
		}
		elsif ($menuselection eq "4")
		{
			# Hack Log File
			PrintDebugCommand("Displaying Hack log file");
			system("$PagerCommand $HackLog");
		}
		elsif ($menuselection eq "5")
		{
			# Sbbsecho Log File
			PrintDebugCommand("Displaying Sbbsecho log file");
			system("$PagerCommand $SbbsechoLog");
		}
		elsif ($menuselection eq "6")
		{
			# Spam Log File
			PrintDebugCommand("Displaying Spam log file");
			system("$PagerCommand $SpamLog");
		}
		elsif ($menuselection eq "7")
		{
			# Screen log file
			if (-f $ScreenLog)
			{
				PrintDebugCommand("Deleting Screen log file");
				unlink($ScreenLog);
			}
		}
		elsif ($menuselection eq "8")
		{
			# Error log file
			if (-f $ErrorLog)
			{
				PrintDebugCommand("Deleting Error log file");
				unlink($ErrorLog);
			}
		}
		elsif ($menuselection eq "9")
		{
			# Guru log file
			if (-f $GuruLog)
			{
				PrintDebugCommand("Deleting Guru log file");
				unlink($GuruLog);
			}
		}
		elsif ($menuselection eq "10")
		{
			# Hack log file
			if (-f $HackLog)
			{
				PrintDebugCommand("Deleting Hack log file");
				unlink($HackLog);
			}
		}
		elsif ($menuselection eq "11")
		{
			# Sbbsecho log file
			if (-f $SbbsechoLog)
			{
				PrintDebugCommand("Deleting Sbbsecho log file");
				unlink($SbbsechoLog);
			}
		}
		elsif ($menuselection eq "12")
		{
			# Spam log file
			if (-f $SpamLog)
			{
				PrintDebugCommand("Deleting Spam log file");
				unlink($SpamLog);
			}
		}
		elsif ($menuselection eq "13")
		{
			# Door Party Log File
			PrintDebugCommand("Displaying Door Party log file");
			system("$PagerCommand $DoorLog");
		}
	}
}

sub BackupTools
{
	while (-1)
	{
		BackupToolsMenu();
		if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
		{
			return;
		}
		elsif ($menuselection eq "1")
		{
			# Run a backup
			PrintDebugCommand("$BackupCommand");
			system("$BackupCommand");
			print "Press Enter To Continue";
			my $entered = <STDIN>;
		}
		elsif ($menuselection eq "2")
		{
			# Do a restore
			DoRestore();
			print "Press Enter To Continue";
			my $entered = <STDIN>;
		}
	}
}

ReadConfigFile();

while (-1)
{
	MainMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		$d->msgbox( title => $enjoyedtitle, text => "Thanks for using SMC..." );
		exit 0;
	} 
	if ($menuselection eq "1")
	{
		if ($d->yesno( text => "Confirm starting the server", text => "Are you sure you want to start the server? You should likely use option #13 instead..." ))
		{
			PrintDebugCommand("$InitDName start");
			system("$InitDName start");
			sleep(10);
		}
	}
	elsif ($menuselection eq "2")
	{
		if ($d->yesno( text => "Confirm stopping the server", text => "Are you sure you want to shut down the server?" ))
		{
			PrintDebugCommand("$InitDName stop");
			system("$InitDName stop");
			sleep(10);
		}
	}
	elsif ($menuselection eq "3")
	{
		$d->msgbox( text => "To exit the SBBS console and return to SMC press CTRL-A CTRL-D" );
		PrintDebugCommand("screen -r SBBS");
		system("screen -r SBBS");
	}
	elsif ($menuselection eq "4")
	{
		# Turn off respawn
		PrintDebugCommand("touch $SBBSDIR/nostart");
		system("touch $SBBSDIR/nostart");
	}
	elsif ($menuselection eq "5")
	{
		# Turn respawn back on
		if (-f "$SBBSDIR/nostart")
		{
			unlink("$SBBSDIR/nostart");
		}
	}
	elsif ($menuselection eq "6")
	{
		# Edit sbbs.ini file
		PrintDebugCommand("$FileEditor $SBBSDIR/ctrl/sbbs.ini");
		system("$FileEditor $SBBSDIR/ctrl/sbbs.ini");
	}
	elsif ($menuselection eq "7")
	{
		# Run scfg
		PrintDebugCommand("$SCFG");
		system("$SCFG");
		# Set owner of /sbbs
		PrintDebugCommand("chown -R $BBS_OWNER /sbbs");
		system("chown -R $BBS_OWNER /sbbs");
	}
	elsif ($menuselection eq "8")
	{
		# Go to backup menu
		BackupTools();
	}
	elsif ($menuselection eq "9")
	{
		# Set owner of /sbbs
		PrintDebugCommand("chown -R $BBS_OWNER /sbbs");
		system("chown -R $BBS_OWNER /sbbs");
	}
	elsif ($menuselection eq "10")
	{
		# Force a call-out to Dovenet
		PrintDebugCommand("touch $SBBSDIR/data/qnet/vert.now");
		system("touch $SBBSDIR/data/qnet/vert.now");
	}
	elsif ($menuselection eq "11")
	{
		# Edit Settings
		PrintDebugCommand("$FileEditor $MySettings");
		system("$FileEditor $MySettings");
		ReadConfigFile();
	}
	elsif ($menuselection eq "12")
	{
		# Force a call-out to Usenet/Newslink
		PrintDebugCommand("touch $SBBSDIR/data/newslink.now");
		system("touch $SBBSDIR/data/newslink.now");
	}
	elsif ($menuselection eq "13")
	{
		# Reset the server process
		print "Killing process, please wait...";
		KillBBS();
		sleep(10);
	}
	elsif ($menuselection eq "14")
	{
		# Posting tools
		PostingTools();
	}
	elsif ($menuselection eq "15")
	{
		# Log files
		LogFiles();
	}
	elsif ($menuselection eq "16")
	{
		# Connect via telnet
		system("clear");
		system("$TelnetCmd localhost");
	}
	elsif ($menuselection eq "17")
	{
		# Update tools
		UpdateTools();
	}
}

exit 0;
