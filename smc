#!/usr/bin/perl
use strict;
use warnings;

use UI::Dialog;
use Term::ReadKey;
use Term::ANSIScreen qw(cls);
use Proc::ProcessTable;

my $FileEditor = "/bin/nano";
my $InitDName = "/etc/init.d/synchronetbbs";
my $SBBSDIR = "/sbbs";
my $BBS_OWNER = "bbsowner";
my $FILEID = "$SBBSDIR/FILEID.txt";
my $BBSIDS = "$SBBSDIR/BBSIDS.txt";
my $BackupCommand = "/root/SyncBackup/syncbackup.pl";
my $PagerCommand = "/usr/bin/less";

###################################################
# No changes below here
###################################################

my $MySettings = "$ENV{'HOME'}/.smcrc";

my $MMC_ver = "1.6.0";
my $Record = "false";	# Are results saved?
my $TempDir = "/tmp";
my $RobotName = "";
my $BotVersion = "";
my $UserName = "";
my $ServerStatus = "foo";
my $SCFG = "$SBBSDIR/exec/scfg";
my $DEBUG_MODE = "off";

my $CONF_FROM = "";
my $CONF_SUBJECT = "";
my $CONF_GROUPS = "";
my $CONF_FILE = "";

if ($ENV{'EDITOR'})
{
        $FileEditor = $ENV{'EDITOR'};
}

my $d = new UI::Dialog ( backtitle => "Synchronet BBS Management Console v$MMC_ver", height => 20, width => 65, listheight => 5,
	order => [ 'ascii', 'cdialog', 'xdialog' ]);

my $windowtitle = "Welcome to the Synchronet BBS Management Console!";
my $enjoyedtitle = "We hope you enjoyed SMC!";
my $introtext =
"This is the Synchronet BBS Management Console, a utility for
Synchronet operators to manage their servers from a text GUI
rather than the command line.";

$d->msgbox( title => $windowtitle, text => $introtext );

if (($d->state() eq "ESC") || ($d->state() eq "CANCEL"))
{
	exit 0;
}

sub ReadConfigFile
{
	# Check for config file
	if (-f $MySettings)
	{
		# Read in settings
		open (my $FH, "<", $MySettings) or die "Could not read default file '$MySettings' $!";
		while (<$FH>)
		{
			chop();
			my ($Command, $Setting) = split(/=/, $_);
			if ($Command eq "fileeditor")
			{
				$FileEditor = $Setting;
			}
			if ($Command eq "initdname")
			{
				$InitDName = $Setting;
			}
			if ($Command eq "sbbsdir")
			{
				$SBBSDIR = $Setting;
			}
			if ($Command eq "backupcommand")
			{
				$BackupCommand = $Setting;
			}
			if ($Command eq "pagercommand")
			{
				$PagerCommand = $Setting;
			}
			if ($Command eq "bbsowner")
			{
				$BBS_OWNER = $Setting;
			}
			if ($Command eq "fileid")
			{
				$FILEID = $Setting;
			}
			if ($Command eq "bbsids")
			{
				$BBSIDS = $Setting;
			}
			if ($Command eq "debugmode")
			{
				$DEBUG_MODE = $Setting;
			}
		}
		close($FH);
	}
	else
	{
		# Store defaults
		open (my $FH, ">", $MySettings) or die "Could not create default file '$MySettings' $!";
		print $FH "sbbsdir=/sbbs\n";
		print $FH "fileeditor=/bin/nano\n";
		print $FH "backupcommand=/root/SyncBackup/syncbackup.pl\n";
		print $FH "pagercommand=/usr/bin/less\n";
		print $FH "bbsowner=bbsowner:bbsowner\n";
		print $FH "fileid=/sbbs/FILEID.txt\n";
		print $FH "bbsid=/sbbs/BBSIDS.txt\n";
		print $FH "debugmode=off\n";
		close($FH);
	}
}

my $menuselection = "";

sub PrintDebugCommand
{
	if ($DEBUG_MODE eq "off")
	{
		return;
	}
	my $PassedString = shift;
	print "About to run:\n$PassedString\n";
	print "Press Enter To Run This:";
	my $entered = <STDIN>;
}

sub CheckServerStatus
{
	$ServerStatus = "Stopped";

        # This checks for the BBS process
        my $t = Proc::ProcessTable->new;
        foreach my $p ( @{$t->table} )
        {
                #printf($FORMAT, 
                #       $p->pid, 
                #       $p->ttydev, 
                #       $p->state, 
                #       scalar(localtime($p->start)), 
                #       $p->cmndline);
                if ($p->cmndline eq "sbbs")
                {
                        # Saw a bare sbbs entry
			$ServerStatus = "Running";
                }
        }
}

sub ReadConfig
{
	my $Keyword;
	my $Keyvalue;

	$CONF_FROM = "";
	$CONF_SUBJECT = "";
	$CONF_GROUPS = "";

	open(my $fh, '<', $CONF_FILE) or die "Could not open file '$CONF_FILE' $!";
	while (my $row = <$fh>)
	{
		chomp $row;
		($Keyword, $Keyvalue) = split(':', $row);
		if ($Keyword eq "FROM")
		{
			$CONF_FROM = $Keyvalue;
		}
		elsif ($Keyword eq "SUBJECT")
		{
			$CONF_SUBJECT = $Keyvalue;
		}
		elsif ($Keyword eq "GROUPS")
		{
			$CONF_GROUPS = $Keyvalue;
		}
	}
	close($fh);
	if ($CONF_FROM eq "")
	{
		die ("FROM not set in config file");
	}
	if ($CONF_SUBJECT eq "")
	{
		die ("SUBJECT not set in config file");
	}
	if ($CONF_GROUPS eq "")
	{
		die ("GROUPS not set in config file");
	}
}

sub KillBBS
{
	# This kills just the BBS process, so it can be restarted
	# via the startup script
	my $FORMAT = "%-6s %-10s %-8s %-24s %s\n";
	my $t = Proc::ProcessTable->new;
	#printf($FORMAT, "PID", "TTY", "STAT", "START", "COMMAND"); 
	foreach my $p ( @{$t->table} )
	{
		#printf($FORMAT, 
		#	$p->pid, 
		#	$p->ttydev, 
		#	$p->state, 
		#	scalar(localtime($p->start)), 
		#	$p->cmndline);
		if ($p->cmndline eq "sbbs")
		{
			# Saw a bare sbbs entry
			my $pid = $p->pid;
			#print "**** saw it $pid\n";
			PrintDebugCommand("kill $pid");
			system("kill $pid");
		}
	}
}

sub MainMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Main Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Start Server',
                                      '2', 'Stop Server',
                                      '3', 'Server Console',
                                      '4', 'Turn Off Respawn',
                                      '5', 'Turn On Respawn',
                                      '6', 'Edit sbbs.ini',
                                      '7', 'Run scfg',
                                      '8', 'Backup / Restore',
                                      '9', 'Set File Owners',
                                      '10', 'Call DOVENET',
                                      '11', 'Edit Settings',
                                      '12', 'Call Newslink',
                                      '13', 'Reset BBS Proc.',
                                      '14', 'Posting Tools',
                                      'q', 'Quit SMC' ] );
}

sub PostingToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Posting Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Edit Announce.txt',
                                      '2', 'Edit FilePost.txt',
                                      '3', 'Edit FilePostBottom.txt',
                                      '4', 'Run BBS Announce',
                                      '5', 'Run FileAnnounce',
                                      '6', 'Edit BBS IDs',
                                      '7', 'Edit File IDs',
                                      'q', 'Main Menu' ] );
}

sub PostingTools
{
while (-1)
{
	PostingToolsMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		return;
	}
	elsif ($menuselection eq "1")
	{
		# Edit Announce.txt file
		PrintDebugCommand("$FileEditor $SBBSDIR/exec/Announce.txt");
		system("$FileEditor $SBBSDIR/exec/Announce.txt");
	}
	elsif ($menuselection eq "2")
	{
		# Edit FilePost.txt file
		PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePost.txt");
		system("$FileEditor $SBBSDIR/exec/FilePost.txt");
	}
	elsif ($menuselection eq "3")
	{
		# Edit FilePostBottom.txt file
		PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
		system("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
	}
	elsif ($menuselection eq "4")
	{
		# Read in config
		$CONF_FILE = $BBSIDS;
		ReadConfig();

		# Run BBS Announce
		PrintDebugCommand("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
		system("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
	}
	elsif ($menuselection eq "5")
	{
		# Read in config
		$CONF_FILE = $FILEID;
		ReadConfig();

		# Run File Announce
		PrintDebugCommand("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
		system("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
	}
	elsif ($menuselection eq "6")
	{
		# Edit BBSIDS.txt file
		if (! -f $BBSIDS)
		{
			PrintDebugCommand("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
			system("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
		}
		PrintDebugCommand("$FileEditor $BBSIDS");
		system("$FileEditor $BBSIDS");
	}
	elsif ($menuselection eq "7")
	{
		# Edit FILEID.txt file
		if (! -f $FILEID)
		{
			PrintDebugCommand("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
			system("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
		}
		PrintDebugCommand("$FileEditor $FILEID");
		system("$FileEditor $FILEID");
	}
}
}

sub BackupToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$SBBSDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Backup Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Run Backup',
                                      '2', 'Restore Backup',
                                      'q', 'Main Menu' ] );
}

sub BackupTools
{
while (-1)
{
	BackupToolsMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		return;
	}
	elsif ($menuselection eq "1")
	{
		# Run a backup
		PrintDebugCommand("$BackupCommand");
		system("$BackupCommand");
                print "Press Enter To Continue";
                my $entered = <STDIN>;
	}
	elsif ($menuselection eq "2")
	{
		# Do a restore
		PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePost.txt");
		system("$FileEditor $SBBSDIR/exec/FilePost.txt");
	}
	elsif ($menuselection eq "3")
	{
		# Edit FilePostBottom.txt file
		PrintDebugCommand("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
		system("$FileEditor $SBBSDIR/exec/FilePostBottom.txt");
	}
	elsif ($menuselection eq "4")
	{
		# Read in config
		$CONF_FILE = $BBSIDS;
		ReadConfig();

		# Run BBS Announce
		PrintDebugCommand("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
		system("/root/bbs_utils/bbs_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --groups='$CONF_GROUPS'");
	}
	elsif ($menuselection eq "5")
	{
		# Read in config
		$CONF_FILE = $FILEID;
		ReadConfig();

		# Run File Announce
		PrintDebugCommand("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
		system("/root/bbs_utils/file_announce.pl --bbsowner='$CONF_FROM' --bbssubj='$CONF_SUBJECT' --group='$CONF_GROUPS'");
	}
	elsif ($menuselection eq "6")
	{
		# Edit BBSIDS.txt file
		if (! -f $BBSIDS)
		{
			PrintDebugCommand("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
			system("cp /root/SynchronetManagementConsole/BBS_ANN_DEF.txt $BBSIDS");
		}
		PrintDebugCommand("$FileEditor $BBSIDS");
		system("$FileEditor $BBSIDS");
	}
	elsif ($menuselection eq "7")
	{
		# Edit FILEID.txt file
		if (! -f $FILEID)
		{
			PrintDebugCommand("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
			system("cp /root/SynchronetManagementConsole/FILE_ANN_DEF.txt $FILEID");
		}
		PrintDebugCommand("$FileEditor $FILEID");
		system("$FileEditor $FILEID");
	}
}
}

ReadConfigFile();

while (-1)
{
	MainMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		$d->msgbox( title => $enjoyedtitle, text => "Thanks for using SMC..." );
		exit 0;
	}
	if ($menuselection eq "1")
	{
		PrintDebugCommand("$InitDName start");
		system("$InitDName start");
	}
	elsif ($menuselection eq "2")
	{
		if ($d->yesno( text => "Confirm stopping the server", text => "Are you sure you want to shut down the server?" ))
		{
			PrintDebugCommand("$InitDName stop");
			system("$InitDName stop");
			sleep(10);
		}
	}
	elsif ($menuselection eq "3")
	{
		$d->msgbox( text => "To exit the SBBS console and return to SMC press CTRL-A CTRL-D" );
		PrintDebugCommand("screen -r");
		system("screen -r");
	}
	elsif ($menuselection eq "4")
	{
		# Turn off respawn
		PrintDebugCommand("touch $SBBSDIR/nostart");
		system("touch $SBBSDIR/nostart");
	}
	elsif ($menuselection eq "5")
	{
		# Turn respawn back on
		if (-f "$SBBSDIR/nostart")
		{
			unlink("$SBBSDIR/nostart");
		}
	}
	elsif ($menuselection eq "6")
	{
		# Edit sbbs.ini file
		PrintDebugCommand("$FileEditor $SBBSDIR/ctrl/sbbs.ini");
		system("$FileEditor $SBBSDIR/ctrl/sbbs.ini");
	}
	elsif ($menuselection eq "7")
	{
		# Run scfg
		PrintDebugCommand("$SCFG");
		system("$SCFG");
	}
	elsif ($menuselection eq "8")
	{
		# Go to backup menu
		BackupTools();
	}
	elsif ($menuselection eq "9")
	{
		# Set owner of /sbbs
		PrintDebugCommand("chown -R $BBS_OWNER /sbbs");
		system("chown -R $BBS_OWNER /sbbs");
	}
	elsif ($menuselection eq "10")
	{
		# Force a call-out to Dovenet
		PrintDebugCommand("touch $SBBSDIR/data/qnet/vert.now");
		system("touch $SBBSDIR/data/qnet/vert.now");
	}
	elsif ($menuselection eq "11")
	{
		# Edit Settings
		PrintDebugCommand("$FileEditor $MySettings");
		system("$FileEditor $MySettings");
		ReadConfigFile();
	}
	elsif ($menuselection eq "12")
	{
		# Force a call-out to Usenet/Newslink
		PrintDebugCommand("touch $SBBSDIR/data/newslink.now");
		system("touch $SBBSDIR/data/newslink.now");
	}
	elsif ($menuselection eq "13")
	{
		# Reset the server process
		print "Killing process, please wait...";
		KillBBS();
		sleep(10);
	}
	elsif ($menuselection eq "14")
	{
		# Posting tools
		PostingTools();
	}
}

exit 0;
